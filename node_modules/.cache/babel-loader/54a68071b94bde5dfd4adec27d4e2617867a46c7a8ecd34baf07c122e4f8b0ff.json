{"ast":null,"code":"var _jsxFileName = \"/app/src/context/form-context.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\n\n/**\n *\n * interface for data that help us run the simulation\n * and it's contains the 3 params for the simulation which is :\n * totalGrossWages, totalProjectPerMonth, ordersFromThirdParties\n */\n\n/**\n *\n * interface for user infos\n *\n */\n\n/**\n * this interface help us define the most important states that we need to include in our\n * contextAPI to make sure that our forms run smoothly\n * we will explain every element along the way\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * default values for contextApi States\n */\n\nconst defaultContextValue = {\n  page: 0,\n  resetForm: () => {},\n  handlePageChange: value => {},\n  setSubmitted: value => {},\n  handleChange: e => {},\n  canSubmit: () => false,\n  submitted: false,\n  handleChangeUserInfo: e => {},\n  numberOfPages: 2,\n  userInfo: {\n    company: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    title: \"\"\n  },\n  data: {\n    ordersFromThirdParties: 0,\n    totalGrossWages: 0,\n    totalProjectPerMonth: 0\n  }\n};\n\n/**\n * Here we create the context using the createContext function from react lib\n * and make an initialization the values\n */\nexport const FormContext = /*#__PURE__*/createContext(defaultContextValue);\n\n/**\n *\n * Here we are creating the Form provider that we will use wrap the form with\n * and help us accessing the states and manipulate it\n */\n\nexport const FormProvider = ({\n  children\n}) => {\n  _s();\n  // we are using page state to define which step we are at in our form\n  const [page, setPage] = useState(0);\n  //with this state we know if the form has been submitted and based on that we show thank-you page\n  const [submitted, setSubmitted] = useState(false);\n  // this data state hold the simulation params\n  const [data, setData] = useState(defaultContextValue.data);\n  // we use user info to store user data from the second form\n  const [userInfo, setUserInfo] = useState(defaultContextValue.userInfo);\n  // function to handle page switch make sure that we are on the correct page on each step\n  const handlePageChange = newPage => {\n    if (newPage >= 0 && newPage < defaultContextValue.numberOfPages) setPage(newPage);\n  };\n\n  /**\n   * This function handle input changes for simulation params\n   * @param event\n   */\n\n  const handleChange = event => {\n    // we are using it in a generic way by taking the name of the input\n    // so we can define which element we should update\n    const name = event.target.name;\n    setData(prevData => ({\n      ...prevData,\n      [name]: event.target.value\n    }));\n  };\n\n  /**\n   * this function handle input changes for user data\n   * @param event\n   */\n  const handleChangeUserInfo = event => {\n    const name = event.target.name;\n    setUserInfo(prevData => ({\n      ...prevData,\n      [name]: event.target.value\n    }));\n  };\n\n  /**\n   * This function check if all input are filled\n   * and here we can add more validations\n   *\n   * @returns boolean\n   */\n  const canSubmit = () => {\n    return [...Object.values(userInfo)].every(Boolean);\n  };\n  const resetForm = () => {\n    setData(defaultContextValue.data);\n    setUserInfo(defaultContextValue.userInfo);\n    setPage(0);\n    setSubmitted(false);\n  };\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: {\n      resetForm,\n      canSubmit,\n      submitted,\n      setSubmitted,\n      userInfo,\n      numberOfPages: defaultContextValue.numberOfPages,\n      data,\n      page,\n      handlePageChange,\n      handleChange,\n      handleChangeUserInfo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(FormProvider, \"55eV0kFijO0I8G01rhUnjOji4Kw=\");\n_c = FormProvider;\nvar _c;\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"names":["createContext","useState","jsxDEV","_jsxDEV","defaultContextValue","page","resetForm","handlePageChange","value","setSubmitted","handleChange","e","canSubmit","submitted","handleChangeUserInfo","numberOfPages","userInfo","company","email","firstName","lastName","phoneNumber","title","data","ordersFromThirdParties","totalGrossWages","totalProjectPerMonth","FormContext","FormProvider","children","_s","setPage","setData","setUserInfo","newPage","event","name","target","prevData","Object","values","every","Boolean","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/context/form-context.tsx"],"sourcesContent":["import { createContext, useState, ReactNode } from \"react\";\n\n/**\n *\n * interface for data that help us run the simulation\n * and it's contains the 3 params for the simulation which is :\n * totalGrossWages, totalProjectPerMonth, ordersFromThirdParties\n */\ninterface IData {\n  totalGrossWages: number;\n  totalProjectPerMonth: number;\n  ordersFromThirdParties: number;\n}\n\ninterface FormProviderProps {\n  children: ReactNode;\n}\n\n/**\n *\n * interface for user infos\n *\n */\ninterface IUserInfo {\n  title: string;\n  firstName: string;\n  lastName: string;\n  company: string;\n  phoneNumber: string;\n  email: string;\n}\n\n/**\n * this interface help us define the most important states that we need to include in our\n * contextAPI to make sure that our forms run smoothly\n * we will explain every element along the way\n */\ninterface IFormContext {\n  data: IData;\n  userInfo: IUserInfo;\n  page: number;\n  resetForm: () => void;\n  canSubmit: () => boolean;\n  submitted: boolean;\n  setSubmitted: (value: boolean) => void;\n  handleChange: (e: any) => void;\n  handleChangeUserInfo: (e: any) => void;\n  handlePageChange: (value: number) => void;\n  numberOfPages: number;\n}\n\n/**\n * default values for contextApi States\n */\n\nconst defaultContextValue: IFormContext = {\n  page: 0,\n  resetForm: () => {},\n  handlePageChange: (value: number) => {},\n  setSubmitted: (value: boolean) => {},\n  handleChange: (e: any) => {},\n  canSubmit: () => false,\n  submitted: false,\n  handleChangeUserInfo: (e: any) => {},\n  numberOfPages: 2,\n  userInfo: {\n    company: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    title: \"\",\n  },\n  data: {\n    ordersFromThirdParties: 0,\n    totalGrossWages: 0,\n    totalProjectPerMonth: 0,\n  },\n};\n\n/**\n * Here we create the context using the createContext function from react lib\n * and make an initialization the values\n */\nexport const FormContext = createContext<IFormContext>(defaultContextValue);\n\n/**\n *\n * Here we are creating the Form provider that we will use wrap the form with\n * and help us accessing the states and manipulate it\n */\n\nexport const FormProvider = ({ children }: FormProviderProps) => {\n  // we are using page state to define which step we are at in our form\n  const [page, setPage] = useState(0);\n  //with this state we know if the form has been submitted and based on that we show thank-you page\n  const [submitted, setSubmitted] = useState(false);\n  // this data state hold the simulation params\n  const [data, setData] = useState<IData>(defaultContextValue.data);\n  // we use user info to store user data from the second form\n  const [userInfo, setUserInfo] = useState<IUserInfo>(\n    defaultContextValue.userInfo\n  );\n  // function to handle page switch make sure that we are on the correct page on each step\n  const handlePageChange = (newPage: number) => {\n    if (newPage >= 0 && newPage < defaultContextValue.numberOfPages)\n      setPage(newPage);\n  };\n\n  /**\n   * This function handle input changes for simulation params\n   * @param event\n   */\n\n  const handleChange = (event: any) => {\n    // we are using it in a generic way by taking the name of the input\n    // so we can define which element we should update\n    const name = event.target.name;\n    setData((prevData: IData) => ({\n      ...prevData,\n      [name]: event.target.value,\n    }));\n  };\n\n  /**\n   * this function handle input changes for user data\n   * @param event\n   */\n  const handleChangeUserInfo = (event: any) => {\n    const name = event.target.name;\n\n    setUserInfo((prevData: IUserInfo) => ({\n      ...prevData,\n      [name]: event.target.value,\n    }));\n  };\n\n  /**\n   * This function check if all input are filled\n   * and here we can add more validations\n   *\n   * @returns boolean\n   */\n  const canSubmit = (): boolean => {\n    return [...Object.values(userInfo)].every(Boolean);\n  };\n\n  const resetForm = () => {\n    setData(defaultContextValue.data);\n    setUserInfo(defaultContextValue.userInfo);\n    setPage(0);\n    setSubmitted(false);\n  };\n\n  return (\n    <FormContext.Provider\n      value={{\n        resetForm,\n        canSubmit,\n        submitted,\n        setSubmitted,\n        userInfo,\n        numberOfPages: defaultContextValue.numberOfPages,\n        data,\n        page,\n        handlePageChange,\n        handleChange,\n        handleChangeUserInfo,\n      }}\n    >\n      {children}\n    </FormContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAmB,OAAO;;AAE1D;AACA;AACA;AACA;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAmBA;AACA;AACA;;AAEA,MAAMC,mBAAiC,GAAG;EACxCC,IAAI,EAAE,CAAC;EACPC,SAAS,EAAEA,CAAA,KAAM,CAAC,CAAC;EACnBC,gBAAgB,EAAGC,KAAa,IAAK,CAAC,CAAC;EACvCC,YAAY,EAAGD,KAAc,IAAK,CAAC,CAAC;EACpCE,YAAY,EAAGC,CAAM,IAAK,CAAC,CAAC;EAC5BC,SAAS,EAAEA,CAAA,KAAM,KAAK;EACtBC,SAAS,EAAE,KAAK;EAChBC,oBAAoB,EAAGH,CAAM,IAAK,CAAC,CAAC;EACpCI,aAAa,EAAE,CAAC;EAChBC,QAAQ,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE;EACT,CAAC;EACDC,IAAI,EAAE;IACJC,sBAAsB,EAAE,CAAC;IACzBC,eAAe,EAAE,CAAC;IAClBC,oBAAoB,EAAE;EACxB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,gBAAG3B,aAAa,CAAeI,mBAAmB,CAAC;;AAE3E;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMwB,YAAY,GAAGA,CAAC;EAAEC;AAA4B,CAAC,KAAK;EAAAC,EAAA;EAC/D;EACA,MAAM,CAACzB,IAAI,EAAE0B,OAAO,CAAC,GAAG9B,QAAQ,CAAC,CAAC,CAAC;EACnC;EACA,MAAM,CAACY,SAAS,EAAEJ,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD;EACA,MAAM,CAACsB,IAAI,EAAES,OAAO,CAAC,GAAG/B,QAAQ,CAAQG,mBAAmB,CAACmB,IAAI,CAAC;EACjE;EACA,MAAM,CAACP,QAAQ,EAAEiB,WAAW,CAAC,GAAGhC,QAAQ,CACtCG,mBAAmB,CAACY,QACtB,CAAC;EACD;EACA,MAAMT,gBAAgB,GAAI2B,OAAe,IAAK;IAC5C,IAAIA,OAAO,IAAI,CAAC,IAAIA,OAAO,GAAG9B,mBAAmB,CAACW,aAAa,EAC7DgB,OAAO,CAACG,OAAO,CAAC;EACpB,CAAC;;EAED;AACF;AACA;AACA;;EAEE,MAAMxB,YAAY,GAAIyB,KAAU,IAAK;IACnC;IACA;IACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACD,IAAI;IAC9BJ,OAAO,CAAEM,QAAe,KAAM;MAC5B,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC7B;IACvB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMM,oBAAoB,GAAIqB,KAAU,IAAK;IAC3C,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACD,IAAI;IAE9BH,WAAW,CAAEK,QAAmB,KAAM;MACpC,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC7B;IACvB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMI,SAAS,GAAGA,CAAA,KAAe;IAC/B,OAAO,CAAC,GAAG2B,MAAM,CAACC,MAAM,CAACxB,QAAQ,CAAC,CAAC,CAACyB,KAAK,CAACC,OAAO,CAAC;EACpD,CAAC;EAED,MAAMpC,SAAS,GAAGA,CAAA,KAAM;IACtB0B,OAAO,CAAC5B,mBAAmB,CAACmB,IAAI,CAAC;IACjCU,WAAW,CAAC7B,mBAAmB,CAACY,QAAQ,CAAC;IACzCe,OAAO,CAAC,CAAC,CAAC;IACVtB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACEN,OAAA,CAACwB,WAAW,CAACgB,QAAQ;IACnBnC,KAAK,EAAE;MACLF,SAAS;MACTM,SAAS;MACTC,SAAS;MACTJ,YAAY;MACZO,QAAQ;MACRD,aAAa,EAAEX,mBAAmB,CAACW,aAAa;MAChDQ,IAAI;MACJlB,IAAI;MACJE,gBAAgB;MAChBG,YAAY;MACZI;IACF,CAAE;IAAAe,QAAA,EAEDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjB,EAAA,CAjFWF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}